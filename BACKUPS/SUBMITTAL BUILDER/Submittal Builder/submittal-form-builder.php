<?php
/**
 * Plugin Name: Submittal Form Builder
 * Description: Build hierarchical submittal forms in WP Admin and render via shortcode with PDF/ZIP generation.
 * Version:     1.0.0
 * Author:      Alma / Ish
 */

if (!defined('ABSPATH')) exit;

final class SFB_Plugin {
  const VERSION = '1.0.0';
  private static $instance = null;

  static function instance() { return self::$instance ?: self::$instance = new self; }

  private function __construct() {
    register_activation_hook(__FILE__, [$this, 'activate']);
    add_action('admin_menu', [$this, 'admin_menu']);
    add_shortcode('submittal_builder', [$this, 'shortcode_render']);
    add_action('admin_enqueue_scripts', [$this, 'enqueue_admin']);
    add_action('wp_enqueue_scripts', [$this, 'enqueue_front']);
    add_action('rest_api_init', [$this, 'register_routes']); // stub for later
  }

  /** Create DB tables we'll use later */
  function activate() { $this->ensure_tables(); }

  /** Create SFB tables if missing (safe + idempotent) */
  function ensure_tables() {
    global $wpdb;
    $charset = $wpdb->get_charset_collate();

    $forms  = $wpdb->prefix . 'sfb_forms';
    $nodes  = $wpdb->prefix . 'sfb_nodes';
    $shares = $wpdb->prefix . 'sfb_shares';

    require_once ABSPATH . 'wp-admin/includes/upgrade.php';

    // 1) Forms
    $sql_forms = "
      CREATE TABLE $forms (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
        title VARCHAR(190) NOT NULL,
        settings_json LONGTEXT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY  (id)
      ) $charset;
    ";
    dbDelta($sql_forms);
    if (!empty($wpdb->last_error)) {
      error_log('SFB ensure_tables FORMS error: ' . $wpdb->last_error);
    }

    // 2) Nodes
    $sql_nodes = "
      CREATE TABLE $nodes (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
        form_id BIGINT UNSIGNED NOT NULL,
        parent_id BIGINT UNSIGNED NULL,
        node_type ENUM('category','product','type','model') NOT NULL,
        title VARCHAR(190) NOT NULL,
        slug VARCHAR(190) NULL,
        position INT UNSIGNED DEFAULT 0,
        settings_json LONGTEXT NULL,
        PRIMARY KEY  (id),
        KEY form_id (form_id),
        KEY parent_id (parent_id),
        KEY node_type (node_type)
      ) $charset;
    ";
    dbDelta($sql_nodes);
    if (!empty($wpdb->last_error)) {
      error_log('SFB ensure_tables NODES error: ' . $wpdb->last_error);
    }

    // 3) Shares  (UNIQUE token; do NOT also add plain KEY token)
    $sql_shares = "
      CREATE TABLE $shares (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT,
        form_id BIGINT UNSIGNED NOT NULL,
        token VARCHAR(64) NOT NULL,
        payload_json LONGTEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        expires_at DATETIME NULL,
        PRIMARY KEY  (id),
        KEY form_id (form_id),
        UNIQUE KEY token (token)
      ) $charset;
    ";
    dbDelta($sql_shares);
    if (!empty($wpdb->last_error)) {
      error_log('SFB ensure_tables SHARES error: ' . $wpdb->last_error);
    }
  }

  /** Branding settings helpers */
  private function option_key(){ return 'sfb_branding'; }
  private function default_settings(){
    return [
      'logo_url' => '',
      'company_name' => '',
      'company_address' => '',
      'company_phone' => '',
      'company_website' => '',
      'primary_color' => '#111827',
      'cover_default' => true,
      'footer_text' => 'Generated by Submittal Builder',
    ];
  }
  function api_get_settings(){
    $opt = get_option($this->option_key(), []);
    return ['ok'=>true, 'settings'=> wp_parse_args($opt, $this->default_settings()) ];
  }
  function api_save_settings($req){
    $p = $req->get_json_params();
    $in = $p['settings'] ?? [];
    $clean = [
      'logo_url'        => esc_url_raw($in['logo_url'] ?? ''),
      'company_name'    => sanitize_text_field($in['company_name'] ?? ''),
      'company_address' => sanitize_textarea_field($in['company_address'] ?? ''),
      'company_phone'   => sanitize_text_field($in['company_phone'] ?? ''),
      'company_website' => sanitize_text_field($in['company_website'] ?? ''),
      'primary_color'   => preg_match('/^#([0-9a-f]{3}|[0-9a-f]{6})$/i', $in['primary_color'] ?? '') ? $in['primary_color'] : '#111827',
      'cover_default'   => !empty($in['cover_default']),
      'footer_text'     => sanitize_text_field($in['footer_text'] ?? 'Generated by Submittal Builder'),
    ];
    update_option($this->option_key(), $clean, false);
    return ['ok'=>true, 'settings'=> $clean];
  }

  /** Check if Dompdf is available */
  private function dompdf_available() {
    // 1) Register Dompdf's native autoloader if present
    $auto_native = __DIR__ . '/lib/dompdf/src/Autoloader.php';
    if (file_exists($auto_native)) {
      require_once $auto_native;
      if (class_exists('\\Dompdf\\Autoloader')) {
        \Dompdf\Autoloader::register();
      }
    }

    // 2) Legacy Dompdf autoload (if your package included it)
    $auto_legacy = __DIR__ . '/lib/dompdf/autoload.inc.php';
    if (file_exists($auto_legacy)) {
      require_once $auto_legacy;
    }

    // 3) Register PSR-4 for Masterminds HTML5 (if vendored)
    //    Expected path: lib/masterminds/html5/src/HTML5.php (and friends)
    $mm_src = __DIR__ . '/lib/masterminds/html5/src/';
    if (is_dir($mm_src)) {
      spl_autoload_register(function($class) use ($mm_src) {
        $prefix = 'Masterminds\\HTML5\\';
        if (strncmp($class, $prefix, strlen($prefix)) === 0) {
          $rel = substr($class, strlen($prefix));
          $path = $mm_src . str_replace('\\', '/', $rel) . '.php';
          if (file_exists($path)) require_once $path;
        }
      }, true, true);

      // If Dompdf looks for the legacy class "\Masterminds\HTML5",
      // create an alias to the actual "\Masterminds\HTML5\HTML5" class.
      if (!class_exists('\\Masterminds\\HTML5') && class_exists('\\Masterminds\\HTML5\\HTML5')) {
        class_alias('\\Masterminds\\HTML5\\HTML5', '\\Masterminds\\HTML5');
      }
    }

    // 4) Belt & suspenders: globally disable HTML5 parser in older Dompdf builds
    if (!defined('DOMPDF_ENABLE_HTML5PARSER')) {
      define('DOMPDF_ENABLE_HTML5PARSER', false);
    }

    return class_exists('\\Dompdf\\Dompdf');
  }

  /** Admin Menu */
  function admin_menu() {
    // Top-level: points to the Builder page
    add_menu_page(
      'Submittal Builder',
      'Submittal Builder',
      'manage_options',
      'sfb', // slug for Builder page
      [$this, 'render_builder_page'],
      'dashicons-category',
      56
    );

    // Explicit submenu for Builder (keeps highlight correct)
    add_submenu_page(
      'sfb',
      'Builder',
      'Builder',
      'manage_options',
      'sfb',
      [$this, 'render_builder_page']
    );

    // Separate submenu for Branding
    add_submenu_page(
      'sfb',
      'Branding',
      'Branding',
      'manage_options',
      'sfb-branding',
      [$this, 'render_branding_page']
    );
  }

  /** Builder Page Renderer */
  function render_builder_page() {
    echo '<div class="wrap"><h1>Submittal Form Builder</h1>';
    echo '<div id="sfb-admin-root" data-view="builder"></div></div>';
  }

  /** Branding Page Renderer */
  function render_branding_page() {
    echo '<div class="wrap"><h1>Branding</h1>';
    echo '<div id="sfb-admin-root" data-view="branding"></div></div>';
  }

  /** Enqueue admin assets only on our pages */
  function enqueue_admin($hook) {
    $page = isset($_GET['page']) ? sanitize_key($_GET['page']) : '';

    // Only load on our pages
    if ($page !== 'sfb' && $page !== 'sfb-branding') return;

    // WP deps
    wp_enqueue_script('wp-element');
    wp_enqueue_script('wp-api-fetch');
    wp_enqueue_media();

    // Styles (shared)
    wp_enqueue_style(
      'sfb-admin',
      plugins_url('assets/admin.css', __FILE__),
      [],
      self::VERSION
    );

    // Single JS used for both pages
    wp_enqueue_script(
      'sfb-admin',
      plugins_url('assets/admin.js', __FILE__),
      ['wp-element','wp-api-fetch'],
      self::VERSION,
      true
    );

    wp_localize_script('sfb-admin', 'SFB_ADMIN', [
      'nonce' => wp_create_nonce('wp_rest'),
      'rest'  => esc_url_raw( rest_url('sfb/v1/') ),
      'view'  => ($page === 'sfb-branding') ? 'branding' : 'builder',
    ]);
  }

  /** Enqueue frontend assets when shortcode is present (simple global load for now) */
  function enqueue_front() {
    wp_enqueue_style('sfb-front', plugins_url('assets/app.css', __FILE__), [], self::VERSION);
    wp_enqueue_script('sfb-front', plugins_url('assets/app.js', __FILE__), ['jquery'], self::VERSION, true);
  }

  /** Shortcode: [submittal_builder id="1"] */
  function shortcode_render($atts = []) {
    $atts = shortcode_atts(['id' => 1], $atts, 'submittal_builder');
    $form_id = intval($atts['id']);

    // enqueue frontend assets
    wp_enqueue_style('sfb-app', plugins_url('assets/app.css', __FILE__), [], self::VERSION);
    wp_enqueue_script('sfb-app', plugins_url('assets/app.js', __FILE__), ['wp-api-fetch'], self::VERSION, true);

    // pass nonce + form id + branding settings
    wp_localize_script('sfb-app', 'SFB_APP', [
      'nonce'   => wp_create_nonce('wp_rest'),
      'form_id' => $form_id,
      'brand'   => get_option($this->option_key(), $this->default_settings()),
    ]);

    ob_start(); ?>
    <div class="sfb-frontend" data-form-id="<?php echo esc_attr($form_id); ?>">
      <div class="sfb-row">
        <div class="sfb-col sfb-col-main">
          <div class="sfb-tabs" id="sfb-tabs"></div>
          <div class="sfb-panel" id="sfb-panel"></div>
        </div>
        <div class="sfb-col sfb-col-side">
          <div class="sfb-cart">
            <h3>Products</h3>
            <div id="sfb-cart-list"></div>
            <button id="sfb-generate" class="sfb-btn sfb-btn-primary" disabled>Generate</button>
            <div id="sfb-generate-status" class="sfb-status"></div>
          </div>
        </div>
      </div>
    </div>
    <?php
    return ob_get_clean();
  }

  /** REST routes (stub for next step) */
  function register_routes() {
    register_rest_route('sfb/v1','/health',[
      'methods'=>'GET',
      'permission_callback'=>'__return_true',
      'callback'=>function(){ return ['ok'=>true,'version'=>self::VERSION]; }
    ]);

    // quick debug route to prove registration
    register_rest_route('sfb/v1','/ping',[
      'methods'=>'GET',
      'permission_callback'=>'__return_true',
      'callback'=>function(){ return ['ok'=>true,'pong'=>true]; }
    ]);

    register_rest_route('sfb/v1','/form/seed',[
      'methods'=>'POST',
      'permission_callback'=> function(){ return current_user_can('manage_options'); },
      'callback'=>[$this,'api_seed_demo']
    ]);

    register_rest_route('sfb/v1','/form/(?P<id>\d+)',[
      'methods'=>'GET',
      'permission_callback'=>'__return_true',
      'callback'=>[$this,'api_get_form']
    ]);

    register_rest_route('sfb/v1','/node/save',[
      'methods'=>'POST',
      'permission_callback'=> function(){ return current_user_can('manage_options'); },
      'callback'=>[$this,'api_save_node']
    ]);

    // Create node
    register_rest_route('sfb/v1','/node/create',[
      'methods'=>'POST',
      'permission_callback'=> function(){ return current_user_can('manage_options'); },
      'callback'=>[$this,'api_create_node']
    ]);

    // Delete node (and descendants)
    register_rest_route('sfb/v1','/node/delete',[
      'methods'=>'POST',
      'permission_callback'=> function(){ return current_user_can('manage_options'); },
      'callback'=>[$this,'api_delete_node']
    ]);

    // Reorder node (move up/down within parent)
    register_rest_route('sfb/v1','/node/reorder',[
      'methods'=>'POST',
      'permission_callback'=> function(){ return current_user_can('manage_options'); },
      'callback'=>[$this,'api_reorder_node']
    ]);

    // Duplicate node (and descendants)
    register_rest_route('sfb/v1','/node/duplicate', [
      'methods' => 'POST',
      'callback' => [$this,'api_duplicate_node'],
      'permission_callback' => function(){ return current_user_can('manage_options'); }
    ]);

    register_rest_route('sfb/v1','/generate',[
      'methods'  => 'POST',
      'permission_callback' => '__return_true', // public submission allowed
      'callback' => [$this,'api_generate_packet']
    ]);

    register_rest_route('sfb/v1','/settings',[
      'methods' => 'GET',
      'permission_callback' => function(){ return current_user_can('manage_options'); },
      'callback' => [$this,'api_get_settings']
    ]);
    register_rest_route('sfb/v1','/settings',[
      'methods' => 'POST',
      'permission_callback' => function(){ return current_user_can('manage_options'); },
      'callback' => [$this,'api_save_settings']
    ]);

    // Export form
    register_rest_route('sfb/v1','/form/(?P<id>\d+)/export',[
      'methods' => 'GET',
      'permission_callback' => function(){ return current_user_can('manage_options'); },
      'callback' => [$this,'api_export_form']
    ]);

    // Import form
    register_rest_route('sfb/v1','/form/import',[
      'methods' => 'POST',
      'permission_callback' => function(){ return current_user_can('manage_options'); },
      'callback' => [$this,'api_import_form']
    ]);
  }

  /** Seed a demo form (id=1) with simple hierarchy if not present */
  function api_seed_demo($req){
    try {
      $this->ensure_tables();
      global $wpdb;
      $forms = $wpdb->prefix.'sfb_forms';
      $nodes = $wpdb->prefix.'sfb_nodes';

      // Verify tables exist
      if ( $wpdb->get_var( $wpdb->prepare("SHOW TABLES LIKE %s", $forms) ) !== $forms ) {
        return new WP_Error('server_error','Forms table missing after ensure_tables()', ['status'=>500]);
      }
      if ( $wpdb->get_var( $wpdb->prepare("SHOW TABLES LIKE %s", $nodes) ) !== $nodes ) {
        return new WP_Error('server_error','Nodes table missing after ensure_tables()', ['status'=>500]);
      }

      // create form id=1 if missing
      $form = $wpdb->get_row("SELECT * FROM $forms WHERE id=1");
      if (!$form) {
        $wpdb->insert($forms, ['id'=>1,'title'=>'Demo Form','settings_json'=>null]);
      }

      $count = (int)$wpdb->get_var("SELECT COUNT(*) FROM $nodes WHERE form_id=1");
      if ($count === 0) {
        $wpdb->insert($nodes, ['form_id'=>1,'parent_id'=>0,'node_type'=>'category','title'=>'Framing - Drywall','slug'=>null,'position'=>1,'settings_json'=>null]); $cat = $wpdb->insert_id;
        $wpdb->insert($nodes, ['form_id'=>1,'parent_id'=>$cat,'node_type'=>'product','title'=>'Standard Studs','slug'=>null,'position'=>1,'settings_json'=>null]); $prod = $wpdb->insert_id;
        $wpdb->insert($nodes, ['form_id'=>1,'parent_id'=>$prod,'node_type'=>'type','title'=>'20 Gauge','slug'=>null,'position'=>1,'settings_json'=>null]); $type = $wpdb->insert_id;

        $m1 = ['size'=>'2.5"','flange'=>'1.25"','thickness'=>'20 mil','ksi'=>'33'];
        $wpdb->insert($nodes, ['form_id'=>1,'parent_id'=>$type,'node_type'=>'model','title'=>'250S125-20','slug'=>null,'position'=>1,'settings_json'=>wp_json_encode(['fields'=>$m1])]);

        $m2 = ['size'=>'3.625"','flange'=>'1.25"','thickness'=>'20 mil','ksi'=>'33'];
        $wpdb->insert($nodes, ['form_id'=>1,'parent_id'=>$type,'node_type'=>'model','title'=>'362S125-20','slug'=>null,'position'=>2,'settings_json'=>wp_json_encode(['fields'=>$m2])]);
      }

      return ['ok'=>true,'seeded'=>true];
    } catch (\Throwable $e) {
      error_log('SFB api_seed_demo error: '.$e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Return form + nodes (flat list) */
  function api_get_form($req){
    try {
      $this->ensure_tables();
      global $wpdb;
      $form_id = intval($req['id']);
      $forms = $wpdb->prefix.'sfb_forms';
      $nodes = $wpdb->prefix.'sfb_nodes';

      $form = $wpdb->get_row($wpdb->prepare("SELECT * FROM $forms WHERE id=%d", $form_id), ARRAY_A);
      if (!$form) return new WP_Error('not_found','Form not found', ['status'=>404]);

      $rows = $wpdb->get_results($wpdb->prepare("SELECT * FROM $nodes WHERE form_id=%d ORDER BY position ASC, id ASC", $form_id), ARRAY_A);
      foreach ($rows as &$r) {
        $r['settings'] = $r['settings_json'] ? json_decode($r['settings_json'], true) : [];
        unset($r['settings_json']);
      }
      return ['ok'=>true,'form'=>$form,'nodes'=>$rows];
    } catch (\Throwable $e) {
      error_log('SFB api_get_form error: '.$e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Insert or update a node (title + settings.fields for model) */
  function api_save_node($req){
    try {
      $this->ensure_tables();
      global $wpdb;
      $p = $req->get_json_params();

      $id        = isset($p['id']) ? intval($p['id']) : 0;
      $form_id   = intval($p['form_id'] ?? 0);
      $parent_id = intval($p['parent_id'] ?? 0);
      $node_type = sanitize_key($p['node_type'] ?? 'model');
      $title     = sanitize_text_field($p['title'] ?? '');
      $position  = intval($p['position'] ?? 0);
      $settings  = isset($p['settings']) && is_array($p['settings']) ? $p['settings'] : [];

      if (!$form_id || !$title || !in_array($node_type, ['category','product','type','model'], true)) {
        return new WP_Error('bad_request','Missing/invalid fields', ['status'=>400]);
      }

      $table = $wpdb->prefix.'sfb_nodes';
      $data = [
        'form_id'=>$form_id,
        'parent_id'=>$parent_id,
        'node_type'=>$node_type,
        'title'=>$title,
        'slug'=>sanitize_title($title),
        'position'=>$position,
        'settings_json'=> wp_json_encode($settings),
      ];

      if ($id) { $wpdb->update($table, $data, ['id'=>$id]); }
      else { $wpdb->insert($table, $data); $id = $wpdb->insert_id; }

      $row = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE id=%d", $id), ARRAY_A);
      $row['settings'] = $row['settings_json'] ? json_decode($row['settings_json'], true) : [];
      unset($row['settings_json']);

      return ['ok'=>true,'node'=>$row];
    } catch (\Throwable $e) {
      error_log('SFB api_save_node error: '.$e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Create a node (at end of siblings) */
  function api_create_node($req){
    try {
      $this->ensure_tables();
      global $wpdb;
      $p = $req->get_json_params();

      $form_id   = intval($p['form_id'] ?? 1);
      $parent_id = intval($p['parent_id'] ?? 0);
      $node_type = sanitize_key($p['node_type'] ?? 'category');
      $title     = sanitize_text_field($p['title'] ?? 'Untitled');
      if (!$form_id || !in_array($node_type,['category','product','type','model'],true)) {
        return new WP_Error('bad_request','Invalid form_id or node_type', ['status'=>400]);
      }

      $table = $wpdb->prefix.'sfb_nodes';
      // find next position within same parent
      $next_pos = (int)$wpdb->get_var( $wpdb->prepare(
        "SELECT COALESCE(MAX(position),0)+1 FROM $table WHERE form_id=%d AND parent_id=%d",
        $form_id, $parent_id
      ));

      $settings = [];
      if ($node_type === 'model') $settings = ['fields'=>['size'=>'','flange'=>'','thickness'=>'','ksi'=>'']];

      $wpdb->insert($table,[
        'form_id'=>$form_id,
        'parent_id'=>$parent_id,
        'node_type'=>$node_type,
        'title'=>$title,
        'slug'=>sanitize_title($title),
        'position'=>$next_pos,
        'settings_json'=> wp_json_encode($settings),
      ]);
      $id = $wpdb->insert_id;

      $row = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE id=%d", $id), ARRAY_A);
      $row['settings'] = $row['settings_json'] ? json_decode($row['settings_json'], true) : [];
      unset($row['settings_json']);

      return ['ok'=>true,'node'=>$row];
    } catch (\Throwable $e) {
      error_log('SFB api_create_node error: '.$e->getMessage());
      return new WP_Error('server_error',$e->getMessage(),['status'=>500]);
    }
  }

  /** Delete a node and its subtree */
  function api_delete_node($req){
    try {
      $this->ensure_tables();
      global $wpdb;
      $id = intval( $req->get_param('id') );
      if (!$id) return new WP_Error('bad_request','Missing id',['status'=>400]);

      $table = $wpdb->prefix.'sfb_nodes';
      // collect subtree ids
      $to_delete = [$id];
      $changed = true;
      while ($changed) {
        $placeholders = implode(',', array_fill(0,count($to_delete),'%d'));
        $children = $wpdb->get_col( $wpdb->prepare("SELECT id FROM $table WHERE parent_id IN ($placeholders)", ...$to_delete) );
        $new_ids = array_diff($children ?? [], $to_delete);
        if ($new_ids) { $to_delete = array_merge($to_delete, $new_ids); } else { $changed = false; }
      }
      if ($to_delete) {
        $placeholders = implode(',', array_fill(0,count($to_delete),'%d'));
        $wpdb->query( $wpdb->prepare("DELETE FROM $table WHERE id IN ($placeholders)", ...$to_delete) );
      }
      return ['ok'=>true,'deleted_ids'=>$to_delete];
    } catch (\Throwable $e) {
      error_log('SFB api_delete_node error: '.$e->getMessage());
      return new WP_Error('server_error',$e->getMessage(),['status'=>500]);
    }
  }

  /** Move a node up/down within its siblings (position swap) */
  function api_reorder_node($req){
    try {
      $this->ensure_tables();
      global $wpdb;

      $p  = $req->get_json_params();
      $id = intval($p['id'] ?? 0);
      $dir = sanitize_key($p['direction'] ?? 'up'); // 'up' or 'down'
      if (!$id || !in_array($dir, ['up','down'], true)) {
        return new WP_Error('bad_request', 'Invalid params', ['status' => 400]);
      }

      $table = $wpdb->prefix . 'sfb_nodes';
      $node  = $wpdb->get_row($wpdb->prepare("SELECT * FROM $table WHERE id=%d", $id), ARRAY_A);
      if (!$node) return new WP_Error('not_found', 'Node not found', ['status'=>404]);

      // Normalize parent_id: treat NULL same as 0 for sibling grouping
      $parent_id = isset($node['parent_id']) ? intval($node['parent_id']) : 0;

      // Build neighbor query safely (no string fragments into %s)
      if ($dir === 'up') {
        $sql = "SELECT * FROM $table
                WHERE form_id=%d AND parent_id=%d AND position < %d
                ORDER BY position DESC LIMIT 1";
        $neighbor = $wpdb->get_row($wpdb->prepare($sql, $node['form_id'], $parent_id, $node['position']), ARRAY_A);
      } else {
        $sql = "SELECT * FROM $table
                WHERE form_id=%d AND parent_id=%d AND position > %d
                ORDER BY position ASC LIMIT 1";
        $neighbor = $wpdb->get_row($wpdb->prepare($sql, $node['form_id'], $parent_id, $node['position']), ARRAY_A);
      }

      if (!$neighbor) {
        return ['ok' => true, 'moved' => false]; // already at edge
      }

      // Swap positions atomically-ish (two updates)
      $posA = intval($node['position']);
      $posB = intval($neighbor['position']);

      $wpdb->update($table, ['position'=>$posB], ['id'=>$node['id']]);
      $wpdb->update($table, ['position'=>$posA], ['id'=>$neighbor['id']]);

      return ['ok' => true, 'moved' => true];
    } catch (\Throwable $e) {
      error_log('SFB api_reorder_node error: ' . $e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Duplicate a node and all its descendants */
  function api_duplicate_node($req){
    try {
      $this->ensure_tables();
      $id = intval($req->get_param('id'));
      if (!$id) return new WP_Error('bad_request','Missing id', ['status'=>400]);

      global $wpdb;
      $nodes = $wpdb->prefix . 'sfb_nodes';

      // Fetch original
      $orig = $wpdb->get_row($wpdb->prepare("SELECT * FROM $nodes WHERE id=%d", $id), ARRAY_A);
      if (!$orig) return new WP_Error('not_found','Node not found', ['status'=>404]);

      // Compute next position for same parent
      $next_pos = intval($wpdb->get_var($wpdb->prepare(
        "SELECT COALESCE(MAX(position),0)+1 FROM $nodes WHERE parent_id=%d AND form_id=%d",
        $orig['parent_id'], $orig['form_id']
      )));

      // Recursive clone
      $map = []; // old_id => new_id
      $new_root_id = $this->clone_node_recursive($orig['id'], $orig['parent_id'], $next_pos, $map);

      // Rename root: title (copy)
      $wpdb->update($nodes, ['title' => $orig['title'].' (copy)'], ['id' => $new_root_id]);

      return ['ok'=>true, 'new_id'=>$new_root_id];
    } catch (\Throwable $e) {
      error_log('SFB api_duplicate_node error: ' . $e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Recursively clone a node and its children */
  private function clone_node_recursive($old_id, $new_parent_id, $position, &$map){
    global $wpdb;
    $nodes = $wpdb->prefix.'sfb_nodes';
    $row = $wpdb->get_row($wpdb->prepare("SELECT * FROM $nodes WHERE id=%d", $old_id), ARRAY_A);

    // Insert clone
    $wpdb->insert($nodes, [
      'form_id'       => $row['form_id'],
      'parent_id'     => $new_parent_id,
      'node_type'     => $row['node_type'],
      'title'         => $row['title'],
      'slug'          => $row['slug'],
      'position'      => $position,
      'settings_json' => $row['settings_json'],
    ]);
    $new_id = intval($wpdb->insert_id);
    $map[$old_id] = $new_id;

    // Clone children preserving order
    $kids = $wpdb->get_results($wpdb->prepare(
      "SELECT * FROM $nodes WHERE parent_id=%d ORDER BY position ASC", $old_id
    ), ARRAY_A);
    $pos = 1;
    foreach($kids as $kid){
      $this->clone_node_recursive($kid['id'], $new_id, $pos++, $map);
    }
    return $new_id;
  }

  /** Export form and all nodes as JSON */
  function api_export_form($req){
    try {
      $this->ensure_tables();
      $form_id = intval($req->get_param('id'));
      if (!$form_id) return new WP_Error('bad_request','Missing form_id', ['status'=>400]);

      global $wpdb;
      $nodes = $wpdb->prefix . 'sfb_nodes';

      // Get all nodes for this form
      $all_nodes = $wpdb->get_results($wpdb->prepare(
        "SELECT * FROM $nodes WHERE form_id=%d ORDER BY position ASC", $form_id
      ), ARRAY_A);

      // Parse settings_json
      foreach($all_nodes as &$node){
        $node['settings'] = json_decode($node['settings_json'] ?? '{}', true);
        unset($node['settings_json']);
      }

      return [
        'ok' => true,
        'form' => ['id' => $form_id, 'title' => 'Submittal Form ' . $form_id],
        'nodes' => $all_nodes
      ];
    } catch (\Throwable $e) {
      error_log('SFB api_export_form error: ' . $e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Import nodes (append or replace) */
  function api_import_form($req){
    try {
      $this->ensure_tables();
      $p = $req->get_json_params();
      $form_id = intval($p['form_id'] ?? 1);
      $mode = sanitize_text_field($p['mode'] ?? 'append'); // 'append' or 'replace'
      $nodes = $p['nodes'] ?? [];

      if (!is_array($nodes) || empty($nodes)) {
        return new WP_Error('bad_request','No nodes provided', ['status'=>400]);
      }

      global $wpdb;
      $table = $wpdb->prefix . 'sfb_nodes';

      // Replace mode: delete existing nodes
      if ($mode === 'replace') {
        $wpdb->delete($table, ['form_id' => $form_id]);
      }

      // Map old IDs to new IDs
      $id_map = [];

      // If appending, find max position for root nodes
      $max_pos = 0;
      if ($mode === 'append') {
        $max_pos = intval($wpdb->get_var($wpdb->prepare(
          "SELECT COALESCE(MAX(position),0) FROM $table WHERE form_id=%d AND parent_id=0", $form_id
        )));
      }

      // Insert nodes in order, mapping parent_id
      foreach($nodes as $node){
        $old_id = intval($node['id']);
        $parent_id = intval($node['parent_id'] ?? 0);

        // Map parent_id if it was already imported
        if ($parent_id > 0 && isset($id_map[$parent_id])) {
          $parent_id = $id_map[$parent_id];
        }

        // Adjust position for root nodes in append mode
        $position = intval($node['position'] ?? 0);
        if ($parent_id === 0 && $mode === 'append') {
          $position += $max_pos;
        }

        $settings = $node['settings'] ?? [];

        $wpdb->insert($table, [
          'form_id' => $form_id,
          'parent_id' => $parent_id,
          'node_type' => sanitize_text_field($node['node_type'] ?? 'category'),
          'title' => sanitize_text_field($node['title'] ?? 'Untitled'),
          'slug' => sanitize_title($node['slug'] ?? ''),
          'position' => $position,
          'settings_json' => json_encode($settings)
        ]);

        $id_map[$old_id] = intval($wpdb->insert_id);
      }

      return ['ok' => true, 'imported' => count($nodes)];
    } catch (\Throwable $e) {
      error_log('SFB api_import_form error: ' . $e->getMessage());
      return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
    }
  }

  /** Create a submittal packet (HTML or PDF) in uploads/sfb/ and return its URL */
  function api_generate_packet($req){
    try {
      $this->ensure_tables();
      $p = $req->get_json_params();

      $form_id = intval($p['form_id'] ?? 0);
      $items   = $p['items'] ?? [];  // [{id,title,meta:{size,flange,thickness,ksi}, path:[cat,prod,type]}]
      $meta    = $p['meta'] ?? [];   // ['project','contractor','submittal','include_cover','include_leed']
      $format  = strtolower(sanitize_text_field($p['format'] ?? 'pdf')); // 'pdf' | 'html'

      if (!$form_id || !is_array($items) || empty($items)) {
        return new WP_Error('bad_request','Missing form_id or items', ['status'=>400]);
      }

      $project    = sanitize_text_field($meta['project'] ?? '');
      $contractor = sanitize_text_field($meta['contractor'] ?? '');
      $submittal  = sanitize_text_field($meta['submittal'] ?? '');
      $include_leed  = !empty($meta['include_leed']);

      // Load branding settings
      $brand = get_option($this->option_key(), []);
      $brand = wp_parse_args($brand, $this->default_settings());

      // Use cover_default from branding if not explicitly set
      $include_cover = array_key_exists('include_cover',$meta) ? !empty($meta['include_cover']) : !empty($brand['cover_default']);

      // --- HTML template (same styling as before) ---
      ob_start(); ?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Submittal</title>
  <style>
    :root{ --ink:#111827; --muted:#6b7280; --line:#e5e7eb; --bg:#ffffff; --accent:<?php echo esc_html($brand['primary_color']); ?>; }
    *{ box-sizing:border-box }
    body{ font-family: system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; color:var(--ink); background:#fff; margin:0; }
    .sheet{ max-width:800px; margin:0 auto; padding:28px 34px; }
    h1,h2,h3{ margin:0 0 10px; font-weight:700 }
    .muted{ color:var(--muted) }
    .section{ margin:22px 0 }
    .kv{ display:grid; grid-template-columns: 180px 1fr; gap:8px 14px; margin-top:8px }
    .kv div{ padding:6px 10px; border:1px solid var(--line); border-radius:8px; background:#fafafa }
    .list-head{ display:flex; justify-content:space-between; align-items:baseline; margin-top:10px }
    .item{ border:1px solid var(--line); border-radius:10px; padding:12px; margin:10px 0 }
    .path{ color:var(--muted); font-size:12px; margin-top:4px }
    .grid4{ display:grid; grid-template-columns:repeat(4,1fr); gap:10px; margin-top:10px }
    .pill{ display:inline-block; font-size:12px; background:#f3f4f6; border:1px solid var(--accent); padding:3px 8px; border-radius:999px }
    .foot{ color:var(--muted); font-size:12px; margin-top:16px }
    .titlebar{ display:flex; justify-content:space-between; align-items:center; }
    .brand{ font-weight:800; font-size:18px; letter-spacing:.2px; color:var(--accent); }
    hr{ border:0; height:1px; background:var(--line); margin:16px 0 }
    .pagebreak{ page-break-before: always; }
    @page{ margin:20mm }
    @media print{ .noprint{ display:none !important } body{ background:#fff } }
  </style>
</head>
<body>
<?php if ($include_cover): ?>
  <div class="sheet">
    <?php if (!empty($brand['logo_url'])): ?>
      <div style="text-align:right;margin-bottom:8px"><img src="<?php echo esc_url($brand['logo_url']); ?>" style="max-height:48px;max-width:220px;object-fit:contain"></div>
    <?php endif; ?>
    <div class="titlebar"><div class="brand">Submittal Package</div><div class="muted"><?php echo esc_html(date('M j, Y')); ?></div></div>
    <hr>
    <div class="section"><h2>Project Information</h2>
      <div class="kv">
        <div><strong>Project</strong></div><div><?php echo esc_html($project); ?></div>
        <div><strong>Contractor</strong></div><div><?php echo esc_html($contractor); ?></div>
        <div><strong>Submittal #</strong></div><div><?php echo esc_html($submittal); ?></div>
        <div><strong>Form ID</strong></div><div><?php echo esc_html($form_id); ?></div>
      </div>
      <?php if ($include_leed): ?>
        <div class="section"><span class="pill">Includes LEED info</span></div>
      <?php endif; ?>
    </div>
    <?php if (!empty($brand['company_name']) || !empty($brand['company_address']) || !empty($brand['company_phone']) || !empty($brand['company_website'])): ?>
      <div class="section">
        <h3>Prepared By</h3>
        <div class="kv">
          <div><strong>Company</strong></div><div><?php echo esc_html($brand['company_name']); ?></div>
          <div><strong>Address</strong></div><div><?php echo nl2br(esc_html($brand['company_address'])); ?></div>
          <div><strong>Phone</strong></div><div><?php echo esc_html($brand['company_phone']); ?></div>
          <div><strong>Website</strong></div><div><?php echo esc_html($brand['company_website']); ?></div>
        </div>
      </div>
    <?php endif; ?>
    <div class="foot muted"><?php echo esc_html($brand['footer_text']); ?></div>
  </div>
  <div class="pagebreak"></div>
<?php endif; ?>

  <div class="sheet">
    <div class="titlebar"><h2>Selected Items</h2><div class="muted">Total: <?php echo count($items); ?></div></div>
    <hr>
    <?php foreach ($items as $it):
      $title = esc_html($it['title'] ?? '');
      $path  = (isset($it['path']) && is_array($it['path'])) ? implode(' › ', array_map('esc_html',$it['path'])) : '';
      $m     = $it['meta'] ?? [];
      ?>
      <div class="item">
        <div><strong><?php echo $title; ?></strong></div>
        <?php if ($path): ?><div class="path"><?php echo $path; ?></div><?php endif; ?>
        <div class="grid4">
          <div><b>Size</b><br><?php echo esc_html($m['size'] ?? ''); ?></div>
          <div><b>Flange</b><br><?php echo esc_html($m['flange'] ?? ''); ?></div>
          <div><b>Thickness</b><br><?php echo esc_html($m['thickness'] ?? ''); ?></div>
          <div><b>KSI</b><br><?php echo esc_html($m['ksi'] ?? ''); ?></div>
        </div>
      </div>
    <?php endforeach; ?>
    <div class="foot muted"><?php echo esc_html($brand['footer_text']); ?></div>
  </div>
</body>
</html>
<?php
    $html = ob_get_clean();

    // Save to uploads/sfb/
    $upload = wp_upload_dir();
    $dir = trailingslashit($upload['basedir']).'sfb';
    if (!wp_mkdir_p($dir)) {
      return new WP_Error('server_error','Unable to create uploads directory', ['status'=>500]);
    }

    if ($format === 'pdf') {
      if (!$this->dompdf_available()) {
        // fallback to html
        $format = 'html';
      }
    }

    if ($format === 'pdf') {
      // ---- PDF via Dompdf ----
      $fname = 'submittal-'.date('Ymd-His').'-'.wp_generate_password(6,false,false).'.pdf';
      $path  = trailingslashit($dir).$fname;

      // Dompdf setup
      $options = new \Dompdf\Options();
      $options->set('isRemoteEnabled', true);

      // HARD-OFF: HTML5 parser (we don't want Masterminds unless explicitly loaded)
      $options->set('isHtml5ParserEnabled', false);
      // Some Dompdf versions also look at this legacy key:
      $options->set('isHtml5Parser', false);

      // Better glyph coverage
      $options->set('defaultFont', 'DejaVu Sans');

      // IMPORTANT: Backend must be DOMPDF (uppercase; CPDF triggers legacy class)
      $options->set('pdfBackend', 'DOMPDF');   // new key
      $options->set('pdf_backend', 'DOMPDF');  // legacy key

      $dompdf = new \Dompdf\Dompdf($options);
      // Double-ensure via runtime option setter (covers older versions)
      if (method_exists($dompdf, 'set_option')) {
        $dompdf->set_option('isHtml5ParserEnabled', false);
        $dompdf->set_option('isHtml5Parser', false);
      }
      $dompdf->loadHtml($html, 'UTF-8');
      $dompdf->setPaper('letter', 'portrait');
      $dompdf->render();

      $pdf = $dompdf->output();
      file_put_contents($path, $pdf);

      $url = trailingslashit($upload['baseurl']).'sfb/'.$fname;
      return ['ok'=>true, 'url'=>$url, 'format'=>'pdf'];
    } else {
      // ---- HTML fallback ----
      $fname = 'submittal-'.date('Ymd-His').'-'.wp_generate_password(6,false,false).'.html';
      $path  = trailingslashit($dir).$fname;
      file_put_contents($path, $html);
      $url = trailingslashit($upload['baseurl']).'sfb/'.$fname;
      return ['ok'=>true, 'url'=>$url, 'format'=>'html'];
    }
  } catch (\Throwable $e) {
    error_log('SFB api_generate_packet error: '.$e->getMessage());
    return new WP_Error('server_error', $e->getMessage(), ['status'=>500]);
  }
  }
}

SFB_Plugin::instance();
