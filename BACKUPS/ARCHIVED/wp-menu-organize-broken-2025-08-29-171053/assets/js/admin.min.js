window.wmo_toggle_expand = function(uniqueSlug) { var $button = jQuery("[data-menu-slug='" + uniqueSlug + "'] .wmo-menu-header"); var $wrapper = jQuery("[data-menu-slug='" + uniqueSlug + "'] .wmo-expanded-content"); if ($wrapper.is(":visible")) { $wrapper.hide(); $button.removeClass("expanded"); $button.find(".dashicons").removeClass("dashicons-arrow-down-alt2").addClass("dashicons-arrow-right-alt2"); } else { $wrapper.show(); $button.addClass("expanded"); $button.find(".dashicons").removeClass("dashicons-arrow-right-alt2").addClass("dashicons-arrow-down-alt2"); } }; (function($) { 'use strict'; console.log('=== WMO: Script loaded ==='); console.log('jQuery available:', typeof jQuery); console.log('jQuery UI available:', typeof jQuery.ui); console.log('Sortable available:', typeof jQuery.fn.sortable); console.log('jQuery version:', jQuery.fn.jquery); console.log('jQuery UI version:', jQuery.ui ? jQuery.ui.version : 'Not available'); console.log('Toggle function defined:', typeof window.wmo_toggle_expand !== 'undefined'); window.wmoInitializeSortable = function() { console.log('WMO: Initializing sortable...'); var $sortableContainer = $('.menu-items-list'); var $sortableMenu = $('#wmo-sortable-menu'); if ($sortableContainer.length && $sortableMenu.length) { try { $sortableMenu.sortable({ items: '> li', handle: '.menu-item-handle', placeholder: 'sortable-placeholder', tolerance: 'pointer', cursor: 'move', axis: 'y', opacity: 0.8, zIndex: 1000, start: function(event, ui) { console.log('WMO: Started dragging:', ui.item); ui.item.addClass('dragging'); }, sort: function(event, ui) { console.log('WMO: Sorting in progress'); }, change: function(event, ui) { console.log('WMO: Item position changed'); }, update: function(event, ui) { console.log('WMO: Menu order updated'); saveMenuOrder(); }, stop: function(event, ui) { console.log('WMO: Stopped dragging:', ui.item); ui.item.removeClass('dragging'); } }).disableSelection(); console.log('WMO: Sortable initialized successfully'); } catch (error) { console.error('WMO: Error initializing sortable:', error); } } }; function findMenuElement(identifier) { let element = $(identifier); if (element.length === 0) { console.warn('WMO: Could not find element:', identifier); return null; } return element; } window.addEventListener('error', function(e) { if (e.message && e.message.includes('Could not find identifiable element')) { console.warn('WMO: Suppressing element identification error'); e.preventDefault(); return true; } }); jQuery(document).ready(function($) { $(document).on('click', '.wmo-menu-header[data-toggle-slug]', function(e) { if (!$(e.target).closest('.wmo-color-picker-wrapper, .wmo-status-indicators, .wmo-expand-toggle').length) { var $header = $(this); var uniqueSlug = $header.data('toggle-slug'); if (uniqueSlug) { if (typeof window.wmo_toggle_expand === 'function') { window.wmo_toggle_expand(uniqueSlug); } else { var $wrapper = $header.siblings('.wmo-expanded-content'); var $icon = $header.find('.dashicons'); if ($wrapper.is(':visible')) { $wrapper.hide(); $header.removeClass('expanded'); $icon.removeClass('dashicons-arrow-down-alt2').addClass('dashicons-arrow-right-alt2'); } else { $wrapper.show(); $header.addClass('expanded'); $icon.removeClass('dashicons-arrow-right-alt2').addClass('dashicons-arrow-down-alt2'); } } } } }); }); jQuery(document).ready(function($) { console.log('=== WMO: QUICK TEST SCRIPT ==='); console.log('jQuery loaded:', typeof jQuery !== 'undefined'); console.log('jQuery UI loaded:', typeof jQuery.ui !== 'undefined'); console.log('Sortable loaded:', typeof jQuery.fn.sortable !== 'undefined'); console.log('Toggle function defined:', typeof window.wmo_toggle_expand !== 'undefined'); console.log('=== END QUICK TEST ==='); console.log('WMO: Admin script loaded successfully'); console.log('WMO: Checking for menu items list...'); var menuList = $('.menu-items-list'); if (menuList.length > 0) { console.log('WMO: Menu items list found with', menuList.find('li').length, 'items'); console.log('WMO: CSS classes applied:', menuList.attr('class')); } else { console.log('WMO: Menu items list not found'); } if (typeof $.fn.sortable !== 'undefined') { console.log('WMO: jQuery UI sortable is available'); } else { console.log('WMO: jQuery UI sortable is NOT available'); } console.log('=== WMO: jQuery UI Debugging ==='); console.log('typeof jQuery:', typeof jQuery); console.log('typeof jQuery.ui:', typeof jQuery.ui); console.log('typeof jQuery.fn.sortable:', typeof jQuery.fn.sortable); console.log('jQuery.ui.version:', jQuery.ui ? jQuery.ui.version : 'Not available'); var uiWidgets = Object.keys($.fn).filter(key => key.includes('ui') || key.includes('sortable') || key.includes('draggable')); console.log('Available jQuery UI widgets:', uiWidgets); var jqueryUICSS = $('link[href*="jquery-ui"]').length; console.log('jQuery UI CSS files loaded:', jqueryUICSS); var wpJQueryUIScripts = $('script[src*="jquery-ui"]').length; console.log('WordPress jQuery UI script tags found:', wpJQueryUIScripts); var sortableScripts = $('script[src*="sortable"]').length; console.log('jQuery UI sortable script tags found:', sortableScripts); if (typeof $.fn.sortable === 'undefined') { console.error('WMO: jQuery UI Sortable is not available'); console.error('WMO: Available jQuery UI widgets:', Object.keys($.fn).filter(key => key.includes('ui'))); var wpJQueryUIScripts = $('script[src*="jquery-ui"]').length; console.error('WMO: WordPress jQuery UI script tags found:', wpJQueryUIScripts); var cdnJQueryUI = $('script[src*="jquery-ui.min.js"]').length; console.error('WMO: CDN jQuery UI script tags found:', cdnJQueryUI); console.error('WMO: jQuery UI sortable not available. Please check if scripts are loading properly.'); return; } var $sortableContainer = $('.menu-items-list'); var $sortableMenu = $('#wmo-sortable-menu'); console.log('WMO: Looking for sortable container:', $sortableContainer.length); console.log('WMO: Looking for sortable menu:', $sortableMenu.length); console.log('WMO: Menu items found:', $sortableMenu.find('li').length); if ($sortableContainer.length && $sortableMenu.length) { try { console.log('WMO: Initializing sortable on container'); wmoInitializeSortable(); setTimeout(function() { var isSortable = $sortableMenu.hasClass('ui-sortable'); console.log('WMO: Sortable initialized:', isSortable); if (!isSortable) { console.error('WMO: Sortable not properly initialized'); } console.log('WMO: Sortable instance:', $sortableMenu.sortable('instance')); console.log('WMO: Sortable options:', $sortableMenu.sortable('option')); }, 100); } catch (error) { console.error('WMO: Error initializing sortable:', error); console.error('WMO: Error stack:', error.stack); alert('Error initializing drag and drop: ' + error.message); } } else { console.error('WMO: Sortable container or menu not found'); console.error('WMO: Container found:', $sortableContainer.length); console.error('WMO: Menu found:', $sortableMenu.length); } window.wmoDebug = function() { console.log('=== WMO Debug Function ==='); console.log('jQuery version:', $.fn.jquery); console.log('jQuery UI version:', $.ui ? $.ui.version : 'Not loaded'); console.log('Sortable available:', typeof $.fn.sortable === 'function'); console.log('Container found:', $('.menu-items-list').length); console.log('Menu found:', $('#wmo-sortable-menu').length); console.log('Menu items:', $('#wmo-sortable-menu li').length); console.log('Is sortable:', $('#wmo-sortable-menu').hasClass('ui-sortable')); return { jquery: $.fn.jquery, jqueryUI: $.ui ? $.ui.version : null, sortable: typeof $.fn.sortable === 'function', container: $('.menu-items-list').length, menu: $('#wmo-sortable-menu').length, items: $('#wmo-sortable-menu li').length, isSortable: $('#wmo-sortable-menu').hasClass('ui-sortable') }; }; window.wmoDebugCSS = function() { console.log('=== WMO CSS Debug Function ==='); var $container = $('.menu-items-list'); var $menu = $('#wmo-sortable-menu'); var $items = $('#wmo-sortable-menu li'); var $handles = $('.menu-item-handle'); console.log('Container pointer-events:', $container.css('pointer-events')); console.log('Menu pointer-events:', $menu.css('pointer-events')); console.log('First item pointer-events:', $items.first().css('pointer-events')); console.log('First handle pointer-events:', $handles.first().css('pointer-events')); console.log('Container position:', $container.css('position')); console.log('Menu position:', $menu.css('position')); console.log('First item position:', $items.first().css('position')); console.log('First handle position:', $handles.first().css('position')); console.log('Container z-index:', $container.css('z-index')); console.log('Menu z-index:', $menu.css('z-index')); console.log('First item z-index:', $items.first().css('z-index')); console.log('First handle z-index:', $handles.first().css('z-index')); console.log('Container cursor:', $container.css('cursor')); console.log('Menu cursor:', $menu.css('cursor')); console.log('First item cursor:', $items.first().css('cursor')); console.log('First handle cursor:', $handles.first().css('cursor')); var containerRect = $container[0] ? $container[0].getBoundingClientRect() : null; var menuRect = $menu[0] ? $menu[0].getBoundingClientRect() : null; var firstItemRect = $items.first()[0] ? $items.first()[0].getBoundingClientRect() : null; console.log('Container bounds:', containerRect); console.log('Menu bounds:', menuRect); console.log('First item bounds:', firstItemRect); var noPointerElements = $('*').filter(function() { return $(this).css('pointer-events') === 'none'; }); console.log('Elements with pointer-events: none:', noPointerElements.length); if (noPointerElements.length > 0) { console.log('Elements with no pointer events:', noPointerElements); } return { containerPointerEvents: $container.css('pointer-events'), menuPointerEvents: $menu.css('pointer-events'), itemPointerEvents: $items.first().css('pointer-events'), handlePointerEvents: $handles.first().css('pointer-events'), containerPosition: $container.css('position'), menuPosition: $menu.css('position'), itemPosition: $items.first().css('position'), handlePosition: $handles.first().css('position'), containerZIndex: $container.css('z-index'), menuZIndex: $menu.css('z-index'), itemZIndex: $items.first().css('z-index'), handleZIndex: $handles.first().css('z-index'), containerCursor: $container.css('cursor'), menuCursor: $menu.css('cursor'), itemCursor: $items.first().css('cursor'), handleCursor: $handles.first().css('cursor'), noPointerElements: noPointerElements.length }; }; window.wmoTestCSS = function() { console.log('=== WMO CSS Testing ==='); $('.menu-items-list').addClass('wmo-debug-drag wmo-debug-outline'); console.log('Added debug classes to menu container'); $('.menu-item-handle').on('click', function() { console.log('Click detected on handle:', this); }); $('.menu-item-handle').on('mouseenter', function() { console.log('Mouse enter on handle:', this); }); $('.menu-item-handle').on('mouseleave', function() { console.log('Mouse leave on handle:', this); }); $('.menu-item-handle').on('mousedown', function(e) { console.log('Mouse down on handle:', this); console.log('Event:', e); console.log('Button:', e.button); console.log('Buttons:', e.buttons); }); console.log('CSS testing enabled - try clicking and dragging menu items'); }; window.wmoRemoveDebugCSS = function() { $('.menu-items-list').removeClass('wmo-debug-drag wmo-debug-outline'); $('.menu-item-handle').off('click mouseenter mouseleave mousedown'); console.log('Removed debug CSS and event listeners'); }; window.wmoCheckScripts = function() { console.log('=== WMO: Script Loading Check ==='); console.log('jQuery loaded:', typeof jQuery !== 'undefined'); if (typeof jQuery !== 'undefined') { console.log('jQuery version:', jQuery.fn.jquery); } console.log('jQuery UI loaded:', typeof jQuery.ui !== 'undefined'); if (typeof jQuery.ui !== 'undefined') { console.log('jQuery UI version:', jQuery.ui.version); } console.log('Sortable available:', typeof jQuery.fn.sortable === 'function'); var jqueryScripts = $('script[src*="jquery"]').length; var jqueryUIScripts = $('script[src*="jquery-ui"]').length; var sortableScripts = $('script[src*="sortable"]').length; console.log('jQuery script tags:', jqueryScripts); console.log('jQuery UI script tags:', jqueryUIScripts); console.log('Sortable script tags:', sortableScripts); var jqueryUICSS = $('link[href*="jquery-ui"]').length; console.log('jQuery UI CSS files:', jqueryUICSS); return { jquery: typeof jQuery !== 'undefined', jqueryUI: typeof jQuery.ui !== 'undefined', sortable: typeof jQuery.fn.sortable === 'function', jqueryScripts: jqueryScripts, jqueryUIScripts: jqueryUIScripts, sortableScripts: sortableScripts, jqueryUICSS: jqueryUICSS }; }; window.wmoCheckWordPressCSS = function() { console.log('=== WMO WordPress CSS Conflict Check ==='); var wpAdminSelectors = [ '.wp-admin *', '#wpcontent *', '#wpbody *', '.wrap *', '.menu-items-list *', '#wmo-sortable-menu *' ]; wpAdminSelectors.forEach(function(selector) { try { var elements = $(selector); var noPointerCount = elements.filter(function() { return $(this).css('pointer-events') === 'none'; }).length; if (noPointerCount > 0) { console.log('Found', noPointerCount, 'elements with pointer-events: none in', selector); } } catch (e) { console.log('Error checking selector:', selector, e); } }); var wpClasses = [ '.wp-menu-item', '.wp-submenu', '.wp-menu-name', '.wp-menu-image', '.wp-menu-arrow' ]; wpClasses.forEach(function(className) { var elements = $(className); if (elements.length > 0) { console.log('Found WordPress elements with class:', className, 'Count:', elements.length); elements.each(function(index) { if (index < 3) { console.log(' Element', index, 'pointer-events:', $(this).css('pointer-events')); console.log(' Element', index, 'position:', $(this).css('position')); console.log(' Element', index, 'z-index:', $(this).css('z-index')); } }); } }); var container = $('.menu-items-list')[0]; if (container) { var containerRect = container.getBoundingClientRect(); var overlappingElements = []; $('*').each(function() { if (this !== container && !$.contains(container, this)) { var rect = this.getBoundingClientRect(); if (rect.left < containerRect.right && rect.right > containerRect.left && rect.top < containerRect.bottom && rect.bottom > containerRect.top) { overlappingElements.push({ element: this, tagName: this.tagName, className: this.className, rect: rect }); } } }); console.log('Elements overlapping with menu container:', overlappingElements.length); if (overlappingElements.length > 0) { overlappingElements.slice(0, 5).forEach(function(item, index) { console.log(' Overlapping element', index, ':', item.tagName, item.className); }); } } }; window.wmoForceEnableDrag = function() { console.log('=== WMO Force Enable Drag ==='); $('.menu-items-list, .menu-items-list *, #wmo-sortable-menu, #wmo-sortable-menu *').css({ 'pointer-events': 'auto !important', 'cursor': 'grab !important' }); $('.menu-item-handle').css({ 'pointer-events': 'auto !important', 'cursor': 'grab !important', 'background-color': '#ffff00 !important', 'border': '2px solid #ff0000 !important' }); $('.menu-item-handle').hover( function() { $(this).css({ 'cursor': 'grabbing !important', 'background-color': '#ff0000 !important', 'color': '#ffffff !important' }); }, function() { $(this).css({ 'cursor': 'grab !important', 'background-color': '#ffff00 !important', 'color': '#000000 !important' }); } ); console.log('Forced drag interactions enabled - try dragging now'); }; var menuColors = wmo_ajax.menuColors || {}; if (sessionStorage.getItem('menuOrderSaved') === 'true') { $('#wmo-save-order').after('<div id="wmo-success-msg" class="notice notice-success"><p>Menu order updated successfully!</p></div>'); setTimeout(function() { $('#wmo-success-msg').fadeOut('slow', function() { $(this).remove(); }); }, 3000); sessionStorage.removeItem('menuOrderSaved'); } function saveMenuOrder() { var newOrder = $sortableMenu.sortable('toArray', { attribute: 'data-slug' }); console.log('WMO: Saving menu order:', newOrder); if (newOrder.length === 0) { console.error('WMO: No menu items found to save'); return; } $.ajax({ url: wmo_ajax.ajax_url, method: 'POST', data: { action: 'wmo_save_menu_order', order: newOrder, nonce: wmo_ajax.nonce }, beforeSend: function() { console.log('WMO: Sending AJAX request to save menu order'); $('#wmo-save-order').prop('disabled', true).text('Saving...'); }, success: function(response) { console.log('WMO: AJAX Response:', response); if (response.success) { console.log('WMO: New order received:', response.data.order); sessionStorage.setItem('menuOrderSaved', 'true'); $('#wmo-save-order').prop('disabled', false).text('Save Menu Order'); location.reload(); } else { console.error('WMO: AJAX error response:', response.data); alert('Error saving menu order: ' + (response.data || 'Unknown error')); $('#wmo-save-order').prop('disabled', false).text('Save Menu Order'); } }, error: function(jqXHR, textStatus, errorThrown) { console.error('WMO: AJAX error:', textStatus, errorThrown); console.log('WMO: Response Text:', jqXHR.responseText); var errorMessage = 'An error occurred. Please check the console and try again.'; if (jqXHR.status === 0) { errorMessage = 'Network error. Please check your internet connection and try again.'; } alert(errorMessage); $('#wmo-save-order').prop('disabled', false).text('Save Menu Order'); } }); } $('#wmo-save-order').on('click', function() { console.log('WMO: Save button clicked'); saveMenuOrder(); }); if ($.fn.wpColorPicker) { $('.wmo-color-field').wpColorPicker({ change: function(event, ui) { var $this = $(this); var slug = $this.data("menu-slug"); var color = ui.color.toString(); var isSubmenu = $this.data("is-submenu") === true; console.log('WMO: Color picker changed:', slug, color, isSubmenu); $this.val(color); var inputName = $this.attr('name'); if (inputName) { $('input[name="' + inputName + '"]').val(color); } wmoApplyColor(slug, color, isSubmenu, true); } }); } else { console.error('WMO: WordPress Color Picker not available'); } function wmoApplyColor(slug, color, isSubmenu, isPreview = false) { console.log('WMO: Applying color:', slug, color, isSubmenu, isPreview ? '(preview)' : ''); var menuItems = []; if (slug === 'all-in-one-wp-migration') { menuItems = [document.querySelector('#toplevel_page_ai1wm_export > a')]; } else if (isSubmenu) { menuItems = Array.from(document.querySelectorAll('#adminmenu .wp-submenu li a')).filter(item => item.textContent.trim().toLowerCase() === slug.replace(/-/g, ' ').toLowerCase() ); } else { var selectors = [ '#menu-' + slug + ' > a', '#toplevel_page_' + slug + ' > a', 'li[id="menu-' + slug + '"] > a', 'li[class*="menu-' + slug + '"] > a' ]; selectors.forEach(function(selector) { var element = findMenuElement(selector); if (element && element.length > 0) { console.log('WMO: Found elements with selector:', selector, element.length); menuItems = menuItems.concat(Array.from(element)); } }); if (menuItems.length === 0) { var allMenuLinks = document.querySelectorAll('#adminmenu > li > a'); allMenuLinks.forEach(function(link) { var linkText = link.textContent.trim().toLowerCase(); var slugText = slug.replace(/-/g, ' ').toLowerCase(); if (linkText === slugText || linkText.includes(slugText)) { menuItems.push(link); console.log('WMO: Found menu item by text matching:', linkText); } }); } } menuItems.forEach(function(menuItem) { if (menuItem) { console.log('WMO: Applying color to:', menuItem); if (isPreview) { menuItem.style.setProperty('color', color || '', 'important'); console.log('WMO: Applied preview color with !important'); wmoInjectIconCSS(slug, color); var iconSelectors = [ '.wp-menu-image:before', '.wp-menu-image', '.dashicons', '.dashicons:before' ]; iconSelectors.forEach(function(iconSelector) { var icons = menuItem.querySelectorAll(iconSelector); if (icons.length === 0) { var parentLi = menuItem.closest('li'); if (parentLi) { icons = parentLi.querySelectorAll(iconSelector); } } icons.forEach(function(icon) { if (icon) { icon.style.setProperty('color', color || '', 'important'); console.log('WMO: Applied preview color to icon:', iconSelector, icon); } }); }); var parentLi = menuItem.closest('li'); if (parentLi) { var directIcon = parentLi.querySelector('.wp-menu-image'); if (directIcon) { directIcon.style.setProperty('color', color || '', 'important'); console.log('WMO: Applied preview color to direct icon'); } } } else { menuItem.style.color = color || ''; var icon = menuItem.querySelector('.wp-menu-image, .dashicons'); if (icon) { icon.style.color = color || ''; } } } }); if (menuItems.length === 0) { console.log('WMO: Menu item not found for slug:', slug); var allMenuItems = document.querySelectorAll('#adminmenu > li'); console.log('WMO: Available menu items for debugging:'); allMenuItems.forEach(function(item, index) { if (index < 10) { console.log(' ' + index + ':', item.id, item.className, item.textContent.trim().substring(0, 30)); } }); } else { console.log('WMO: Successfully applied color to', menuItems.length, 'menu item(s)'); } if (!isSubmenu && !isPreview) { var parentItem = findMenuElement('#toplevel_page_ai1wm_export, #menu-' + slug); if (parentItem && parentItem.length > 0) { var submenuItems = parentItem.find('.wp-submenu li a'); submenuItems.each(function() { var submenuSlug = $(this).text().trim().toLowerCase().replace(/\s+/g, '-'); if (menuColors[submenuSlug]) { $(this).css('color', menuColors[submenuSlug]); } else { $(this).css('color', 'inherit'); } }); } } } window.wmoApplyColor = wmoApplyColor; function wmoInjectIconCSS(slug, color) { console.log('WMO: Injecting icon CSS for', slug, 'with color', color); var existingStyle = document.getElementById('wmo-preview-' + slug); if (existingStyle) { existingStyle.remove(); } if (color) { var style = document.createElement('style'); style.id = 'wmo-preview-' + slug; style.type = 'text/css'; var css = ''; var selectors = [ '#menu-' + slug + ' .wp-menu-image:before', '#menu-' + slug + ' .dashicons:before', '#toplevel_page_' + slug + ' .wp-menu-image:before', '#toplevel_page_' + slug + ' .dashicons:before', '#adminmenu li[id*="' + slug + '"] .wp-menu-image:before', '#adminmenu li[id*="' + slug + '"] .dashicons:before', '#menu-' + slug + ' .wp-menu-image', '#menu-' + slug + ' .dashicons', '#toplevel_page_' + slug + ' .wp-menu-image', '#toplevel_page_' + slug + ' .dashicons', '#adminmenu li[id*="' + slug + '"] .wp-menu-image', '#adminmenu li[id*="' + slug + '"] .dashicons' ]; selectors.forEach(function(selector) { css += selector + ' { color: ' + color + ' !important; }\n'; }); style.innerHTML = css; document.head.appendChild(style); console.log('WMO: Injected icon CSS:', css); } } function wmoCleanupPreviewCSS(slug) { var existingStyle = document.getElementById('wmo-preview-' + slug); if (existingStyle) { existingStyle.remove(); console.log('WMO: Cleaned up preview CSS for', slug); } } for (var slug in menuColors) { if (menuColors[slug]) { var isSubmenu = slug.includes('-'); wmoApplyColor(slug, menuColors[slug], isSubmenu); } } }); })(jQuery);